# market-analyzer/docker-compose.yml (서버 환경용으로 수정된 버전)

services:
  db:
    image: mysql:8.0
    container_name: fire_markets_db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      TZ: Asia/Seoul
    ports:
      - "3306:3306"  # 외부 접근을 위한 포트 바인딩 추가
    volumes:
      - db_data:/var/lib/mysql
      - ./docker/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app_network
      - shared-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "${DB_USERNAME}", "-p${DB_PASSWORD}" ]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 30s

  # PostgreSQL 서비스 추가
  db_postgres:
    image: postgres:15-alpine
    container_name: fire_markets_db_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_DATABASE_PG}
      POSTGRES_USER: ${DB_USERNAME_PG}
      POSTGRES_PASSWORD: ${DB_PASSWORD_PG}
      TZ: Asia/Seoul
    ports:
      - "5433:5432"  # 포트 충돌 방지
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./docker/init_postgres.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app_network
      - shared-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME_PG} -d ${DB_DATABASE_PG}"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 30s

  # PostgreSQL 관리 도구 (Adminer) - 가벼운 웹 기반
  adminer:
    image: adminer:latest
    container_name: fire_markets_adminer
    restart: unless-stopped
    ports:
      - "5054:8080"
    environment:
      ADMINER_DEFAULT_SERVER: db_postgres
      TZ: Asia/Seoul
    depends_on:
      db_postgres:
        condition: service_healthy
    networks:
      - app_network
      - shared-network

  redis:
    image: redis:7-alpine
    container_name: fire_markets_redis
    restart: unless-stopped
    networks:
      - app_network
      - shared-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: fire_markets_backend
    restart: unless-stopped
    ports:
      - "8001:8000"
    env_file:
      - .env
    environment:
      DATABASE_URL: mysql+mysqlconnector://${DB_USERNAME}:${DB_PASSWORD}@db:3306/${DB_DATABASE}
      POSTGRES_DATABASE_URL: postgresql+psycopg2://${DB_USERNAME_PG}:${DB_PASSWORD_PG}@db_postgres:5432/${DB_DATABASE_PG}
      SECRET_KEY: ${SECRET_KEY}
      ALPHA_VANTAGE_API_KEY_1: ${ALPHA_VANTAGE_API_KEY_1}
      FMP_API_KEY: ${FMP_API_KEY}
      BINANCE_API_KEY: ${BINANCE_API_KEY}
      BINANCE_SECRET_KEY: ${BINANCE_SECRET_KEY}
      COINBASE_API_KEY: ${COINBASE_API_KEY}
      COINBASE_SECRET_KEY: ${COINBASE_SECRET_KEY}
      COINMARKETCAP_API_KEY: ${COINMARKETCAP_API_KEY}
      COIN_GECKO_API_KEY: ${COIN_GECKO_API_KEY}
      TWELVEDATA_API_KEY: ${TWELVEDATA_API_KEY}
      TIINGO_API_KEY: ${TIINGO_API_KEY}
      FINNHUB_API_KEY: ${FINNHUB_API_KEY}
      FINNHUB_SECRET_KEY: ${FINNHUB_SECRET_KEY}
      PORT: 8000
      HOST: 0.0.0.0
      RELOAD: "false"
      TZ: Asia/Seoul
    depends_on:
      db:
        condition: service_healthy
      db_postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - ./.env:/app/.env:ro
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
    networks:
      - app_network
      - shared-network

  # --- 독립 스케줄러 서비스 추가 ---
  scheduler:
    profiles: ["processing"]
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: fire_markets_scheduler
    restart: unless-stopped
    env_file:
      - .env
    environment:
      DATABASE_URL: mysql+mysqlconnector://${DB_USERNAME}:${DB_PASSWORD}@db:3306/${DB_DATABASE}
      POSTGRES_DATABASE_URL: postgresql+psycopg2://${DB_USERNAME_PG}:${DB_PASSWORD_PG}@db_postgres:5432/${DB_DATABASE_PG}
      SECRET_KEY: ${SECRET_KEY}
      ALPHA_VANTAGE_API_KEY_1: ${ALPHA_VANTAGE_API_KEY_1}
      FMP_API_KEY: ${FMP_API_KEY}
      BINANCE_API_KEY: ${BINANCE_API_KEY}
      BINANCE_SECRET_KEY: ${BINANCE_SECRET_KEY}
      COINBASE_API_KEY: ${COINBASE_API_KEY}
      COINBASE_SECRET_KEY: ${COINBASE_SECRET_KEY}
      COINMARKETCAP_API_KEY: ${COINMARKETCAP_API_KEY}
      COIN_GECKO_API_KEY: ${COIN_GECKO_API_KEY}
      TWELVEDATA_API_KEY: ${TWELVEDATA_API_KEY}
      TIINGO_API_KEY: ${TIINGO_API_KEY}
      POLYGON_API_KEY: ${POLYGON_API_KEY}
      FINNHUB_API_KEY: ${FINNHUB_API_KEY}
      FINNHUB_SECRET_KEY: ${FINNHUB_SECRET_KEY}
      TZ: Asia/Seoul
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./.env:/app/.env:ro
    command: ["python", "-m", "app.services.run_scheduler"]
    healthcheck:
      disable: true
    networks:
      - app_network
      - shared-network


  # --- 데이터 프로세서 (Processing 프로필) ---
  data_processor:
    profiles: ["processing"]
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: fire_markets_data_processor
    restart: unless-stopped
    env_file:
      - .env
    environment:
      DATABASE_URL: mysql+mysqlconnector://${DB_USERNAME}:${DB_PASSWORD}@db:3306/${DB_DATABASE}
      POSTGRES_DATABASE_URL: postgresql+psycopg2://${DB_USERNAME_PG}:${DB_PASSWORD_PG}@db_postgres:5432/${DB_DATABASE_PG}
      TZ: Asia/Seoul
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./.env:/app/.env:ro
    command: ["python", "-m", "app.services.run_data_processor"]
    healthcheck:
      disable: true
    networks:
      - app_network
      - shared-network

  # --- WebSocket 오케스트레이터 (Processing 프로필) ---
  websocket_orchestrator:
    profiles: ["processing"]
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: fire_markets_websocket_orchestrator
    restart: unless-stopped
    env_file:
      - .env
    environment:
      DATABASE_URL: mysql+mysqlconnector://${DB_USERNAME}:${DB_PASSWORD}@db:3306/${DB_DATABASE}
      POSTGRES_DATABASE_URL: postgresql+psycopg2://${DB_USERNAME_PG}:${DB_PASSWORD_PG}@db_postgres:5432/${DB_DATABASE_PG}
      TZ: Asia/Seoul
      # WebSocket API Keys
      FINNHUB_API_KEY: ${FINNHUB_API_KEY}
      FINNHUB_SECRET_KEY: ${FINNHUB_SECRET_KEY}
      TIINGO_API_KEY: ${TIINGO_API_KEY}
      ALPACA_API_KEY: ${ALPACA_API_KEY}
      ALPACA_SECRET_KEY: ${ALPACA_SECRET_KEY}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./.env:/app/.env:ro
    command: ["sh", "-c", "cd /app && python -m app.services.run_websocket_orchestrator"]
    healthcheck:
      disable: true
    networks:
      - app_network
      - shared-network

  # --- (신규) WebSocket 브로드캐스터 ---
  websocket_broadcaster:
    profiles: ["processing"]
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: fire_markets_websocket_broadcaster
    restart: unless-stopped
    env_file:
      - .env
    environment:
      # POSTGRES_DATABASE_URL 등 다른 서비스와 동일한 환경변수 설정
      POSTGRES_DATABASE_URL: postgresql+psycopg2://${DB_USERNAME_PG}:${DB_PASSWORD_PG}@db_postgres:5432/${DB_DATABASE_PG}
      PYTHONPATH: /app
      TZ: Asia/Seoul
    depends_on:
      backend:
        condition: service_healthy # 백엔드가 healthy 상태가 될 때까지 대기
      redis:
        condition: service_healthy
    volumes:
      - ./.env:/app/.env:ro
    command: ["sh", "-c", "cd /app && python -m app.services.run_websocket_broadcaster"]
    healthcheck:
      disable: true
    networks:
      - app_network
      - shared-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev # 개발용 Dockerfile 사용
    container_name: fire_markets_frontend
    restart: unless-stopped
    ports:
      - "3000:80" # 포트는 유지하되 개발 서버 사용
    environment:
      NODE_ENV: development
      VITE_API_URL: /api
      TZ: Asia/Seoul
    volumes:
      - ./frontend:/app:delegated
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - app_network
      - shared-network

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: fire_markets_phpmyadmin
    restart: unless-stopped
    environment:
      PMA_HOST: db
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./phpmyadmin/uploads.ini:/usr/local/etc/php/conf.d/uploads.ini
    networks:
      - app_network
      - shared-network


  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    ports:
      - "8000:8000"
      - "9443:9443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - shared-network

  nginx-proxy-manager:
    image: jc21/nginx-proxy-manager:latest
    container_name: nginx-proxy-manager
    restart: unless-stopped
    ports:
      - "80:80"
      - "81:81"
      - "443:443"
    volumes:
      - npm_data:/data
      - npm_letsencrypt:/etc/letsencrypt
    networks:
      - shared-network


 

volumes:
  db_data:
  pg_data:  # PostgreSQL 데이터 볼륨 추가
  portainer_data:
  npm_data:
  npm_letsencrypt:

networks:
  app_network:
    driver: bridge
  shared-network:
    external: true
